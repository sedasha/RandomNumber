{"version":3,"sources":["RandomGame/Random.jsx","RandomGame/MainRandom.jsx","App.js","reportWebVitals.js","index.js"],"names":["Random","number","times","className","MainRandom","useState","setNumber","startNumber","setStartNumber","endNumber","setEndNumber","setTimes","count","console","log","map","num","ind","_uniqueId","onClick","number2","i","push","Math","floor","random","type","value","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAaeA,EAVD,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAGpB,OAEI,8BACI,qBAAKC,UAAYD,EAAM,EAAE,yBAAyB,SAAlD,SAA6DD,O,gBCyC1DG,EA7CI,WACf,MAA4BC,mBAAS,IAArC,mBAAOJ,EAAP,KAAeK,EAAf,KACA,EAAsCD,mBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KACA,EAAkCH,mBAAS,KAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAA0BL,mBAAS,GAAnC,mBAAOH,EAAP,KAAcS,EAAd,KACA,EAA0BN,mBAAS,GAAnC,mBAAOO,EAAP,UAkBA,OAFAC,QAAQC,IAAIF,GAGR,sBAAKT,UAAU,YAAf,UACI,gDACA,oBAAIA,UAAU,OAAd,SACKF,EAAOc,KAAI,SAACC,EAAKC,GACd,OAAO,6BAA+B,cAAC,EAAD,CAAQhB,OAAQe,EAAKd,MAAOA,KAAlDgB,IAAU,iBAGlC,wBAAQf,UAAU,SAASgB,QAtBf,WAGhB,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAInB,EAAOmB,IACvBD,EAAQE,KAAKC,KAAKC,MAAMD,KAAKE,UAAYhB,EAAYF,EAAc,GAAKA,IACxEM,QAAQC,IAAIS,KAAKC,MAAMD,KAAKE,UAAahB,EAAYF,EAAe,GAAKA,IACzEM,QAAQC,IAAIM,EAAU,KAE1BP,QAAQC,IAAIM,EAAS,WACrBd,EAAUc,IAaN,sBACA,sBAAKjB,UAAU,WAAf,UACI,mBAAGA,UAAU,OAAb,2DACA,uBAAOA,UAAU,gBAAgBuB,KAAK,SAASC,MAAOzB,EAAO0B,SAAU,SAAAC,GAAC,OAAIlB,EAASkB,EAAEC,OAAOH,MAAQ,SAE1G,sBAAKxB,UAAU,WAAf,UACI,mBAAGA,UAAU,OAAb,6BADJ,QAES,uBAAOA,UAAU,gBAAgBuB,KAAK,SAASC,MAAOpB,EAAaqB,SAAU,SAAAC,GAAC,OAAIrB,EAAeqB,EAAEC,OAAOH,MAAQ,MAF3H,MAGG,uBAAOxB,UAAU,gBAAgBuB,KAAK,SAASC,MAAOlB,EAAWmB,SAAU,SAAAC,GAAC,OAAInB,EAAamB,EAAEC,OAAOH,MAAQ,aCjC9GI,MARf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACC,cAAC,EAAD,OCMU6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bf73e56c.chunk.js","sourcesContent":["import './random.scss'\r\n\r\n\r\nconst Random =({number, times})=>{\r\n   \r\n   \r\n    return (\r\n\r\n        <div >\r\n            <div className= {times>1?\"number bigger_than_one\":\"number\"}>{number}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Random","import { useState } from 'react'\r\nimport Random from './Random'\r\nimport './random.scss'\r\nimport _uniqueId from 'lodash/uniqueId';\r\n\r\nconst MainRandom = () => {\r\n    const [number, setNumber] = useState([])\r\n    const [startNumber, setStartNumber] = useState(0)\r\n    const [endNumber, setEndNumber] = useState(100)\r\n    const [times, setTimes] = useState(1)\r\n    const [count, setCount] = useState(1)\r\n    \r\n\r\n\r\n    const ClickChange = () => {\r\n       \r\n        const number2 = []\r\n        for (let i = 0; i < times; i++) {\r\n            number2.push(Math.floor(Math.random() * (endNumber - startNumber + 1) + startNumber))\r\n            console.log(Math.floor(Math.random() * ((endNumber - startNumber) + 1) + startNumber))\r\n            console.log(number2 + 'l')\r\n        }\r\n        console.log(number2 +'number2')\r\n        setNumber(number2)\r\n    }\r\n  \r\n    console.log(count)\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Random number:</h1>\r\n            <ul className=\"list\">\r\n                {number.map((num, ind) =>{\r\n                    return <li key={_uniqueId('prefix-')}><Random number={num} times={times} /></li>\r\n                })}\r\n            </ul>\r\n            <button className=\"button\" onClick={ClickChange}>Generate</button>\r\n            <div className='quantity'>\r\n                <p className='text'>The quantity of numbers you want to generate.</p>\r\n                <input className=\"betweenNumber\" type='number' value={times} onChange={e => setTimes(e.target.value - 0)} />\r\n            </div>\r\n            <div className='quantity'>\r\n                <p className='text'>Enter the range</p>\r\n                from <input className=\"betweenNumber\" type=\"number\" value={startNumber} onChange={e => setStartNumber(e.target.value - 0)} />\r\n            to <input className=\"betweenNumber\" type=\"number\" value={endNumber} onChange={e => setEndNumber(e.target.value - 0)} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainRandom","import './App.scss';\nimport MainRandom from '../src/RandomGame/MainRandom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <MainRandom />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}